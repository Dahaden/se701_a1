/* Generated By:JavaCC: Do not edit this line. MedParser.java */
package med;
import java.io.*;
public class MedParser implements MedParserConstants {

  final public void MedCenter() throws ParseException {
    jj_consume_token(MEDCENTER);
    jj_consume_token(LBRAC);
    MedCenterAttr();
    jj_consume_token(RBRAC);
    jj_consume_token(0);
  }

  final public void MedCenterAttr() throws ParseException {
        boolean[] count = new boolean[2];
        count[0] = false;  // At least 1 Hour variable
        count[1] = false;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOURS:
        jj_consume_token(HOURS);
                        count[0] = true; // Found Hour

        break;
      case DOCTOR:
        jj_consume_token(DOCTOR);
                        count[1] = true;  // Found Doctor

        break;
      case PATIENT:
        jj_consume_token(PATIENT);
        Patient();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOURS:
      case DOCTOR:
      case PATIENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
                if(!count[0]) // If no Hours found
                {
                        {if (true) throw new ParseException("HOURS is not defined");}
                }
                else if(!count[1])   // If no Doctors found
                {
                        {if (true) throw new ParseException("DOCTOR is not defined");}
                }
  }

  final public void Patient() throws ParseException {
    jj_consume_token(LBRAC);
    PatientAttr();
    jj_consume_token(RBRAC);
  }

  final public void PatientAttr() throws ParseException {
        int[] count = new int[4];
        count[0] = 0;       // ID
        count[1] = 0;           // DOB
        count[2] = 0;           // Phones
        count[3] = 0;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHONES:
      case ID:
      case DOB:
      case ADDRESS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
                count[0]++;
        break;
      case DOB:
        jj_consume_token(DOB);
                count[1]++;
        break;
      case PHONES:
        jj_consume_token(PHONES);
        Phones();
                count[2]++;
        break;
      case ADDRESS:
        jj_consume_token(ADDRESS);
                count[3]++;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if(count[0] != 1)  // If not exactly 1 ID is declared
                {
                        {if (true) throw new ParseException("Exactly 1 ID must be defined per patient");}
                }
                else if(count[1] > 1)   // If more than one DOB declared
                {
                        {if (true) throw new ParseException("More than 1 DOB given");}
                }
                else if(count[2] > 1)   // If more than one PHONES list declared
                {
                        {if (true) throw new ParseException("More than 1 PHONES list given");}
                }
                else if(count[3] > 1)   // If more than one ADDRESS declared
                {
                        {if (true) throw new ParseException("More than 1 ADDRESS given");}
                }
  }

  final public void Phones() throws ParseException {
    jj_consume_token(LBRAC);
    label_3:
    while (true) {
      jj_consume_token(PHONENUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHONENUMBER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(RBRAC);
  }

  /** Generated Token Manager. */
  public MedParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40200080,0x40200080,0x82000000,0x82000000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xa,0xa,0x0,};
   }

  /** Constructor with InputStream. */
  public MedParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MedParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MedParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MedParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MedParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MedParser(MedParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MedParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
