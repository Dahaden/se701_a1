
options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(MedParser)
package med;
import java.io.*;
public class MedParser
{

}

PARSER_END(MedParser)

SKIP :
{
" "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN :   // Have Multiple "TOKEN"S for each structure and library{ < MEDCENTER: "MEDCENTER" (< SPACES >) < NAME >>
| < HOURS: "HOURS" (< SPACES >) (< DAYS >)(< COMMA >< DAYS >)*(< TIMEPERIOD >)>
| < LBRAC: "{" >
| < RBRAC: "}" >
| < COMMA: "," >
| < #DAYS: ("Mon"|"Tue"|"Wed"|"Thu"|"Fri"|"Sat"|"Sun") >

| < DIGIT : (["0"-"9"]) >
| < INTEGER_PAIR : (< DIGIT >){2} >
| < #TIME: (< INTEGER_PAIR >)[":"](< INTEGER_PAIR >) >
| < #TIMEPERIOD: ["("](< TIME >)["-"](< TIME >)[")"] >
| < MONTHS: ("January"|"February"|"March"|"April"|"May"|"June"|"July"|"August"|"September"|"October"|"November"|"December") >

| < LETTER: ["A"-"Z","a"-"z"," "] >
| < ULETTER: ["A"-"Z"] >
| < NAME: ["“"](< LETTER >)+["”"] >
| < #SPACES : (" ")* >
}

TOKEN :{< DOCTOR: ("DOCTOR")(< SPACES >)(< NAME >) (< SPACES >)(< REG_IDWINT >) >
| < #REG_ID: "REG_ID" >
| < #FIVEDIGIT: (< DIGIT >){5} >
| < #REG_IDWINT: (< REG_ID >)(" ")?(< FIVEDIGIT >) >
}

TOKEN :
{
  < PHONES : "PHONES" >
| < PHONENUMBER : (< PHONETYPES >)(< SPACES >)(< NUMBER >)((< SPACES >)(< EXT >)(< SPACES >)(< DIGIT >)+)?>
| < #PHONETYPES : ("HOME"|"WORK"|"MOBILE")(":") >
| < #EXT : "EXT" >
| < #NUMBER : ("+")?(< DIGIT >)+ >
}

TOKEN :{< PATIENT: "PATIENT" (" ")?< NAME >>
| < ID : "ID" (" ")?< IDSTRING >>
| < #IDSTRING : (< ULETTER >){2}(< DIGIT >){5} >
| < DOB : "DOB" (" ")? < DOBSTRING >>
| < #DOBSTRING : (< DIGIT >){1,2}(" ")(< MONTHS >)(" ")(< DIGIT >){4} >
| < ADDRESS : "ADDRESS" (" ")?["\u201c"](< ADDRESSSTRING >)["\u201d"] >
| < #ADDRESSSTRING : (< LETTER > | < DIGIT > | "-" | "/" | < COMMA >)+ >
}

void MedCenter() :{
}
{
  < MEDCENTER >
  <LBRAC >
  MedCenterAttr()
  < RBRAC >< EOF >}

void MedCenterAttr() :
{
  boolean[] count = new boolean[2];
  count[0] = false;
  count[1] = false;}
{	(	  < HOURS >	  {
	    count[0] = true;	  }
|  < DOCTOR >
{
  count[1] = true;}
|  < PATIENT > Patient())+

({  if(!count[0])  { 
  	throw new ParseException("HOURS is not defined");
  }
  else if(!count[1])  {	throw new ParseException("DOCTOR is not defined");
  }})
}

void Patient() :
{}{<LBRAC >
PatientAttr()
< RBRAC >
}

void PatientAttr() :{
  int[] count = new int[4];
  count[0] = 0;
  count[1] = 0;
  count[2] = 0;
  count[3] = 0;}{(    < ID >    {		count[0]++;
    }
| < DOB >
{
		count[1]++;
    }
| < PHONES > Phones()
{
		count[2]++;
    }
| < ADDRESS >
{
		count[3]++;
    }
)*

({  if(count[0] != 1)  {	throw new ParseException("Only 1 ID should be defined per patient");
  }
  else if(count[1] <= 1)
  {	throw new ParseException("More than 1 DOB given");	
  }
  else if(count[2] <= 1)  {	throw new ParseException("More than 1 PHONES list given");
  }
  else if(count[3] <= 1)  {	throw new ParseException("More than 1 ADDRESS given");
  }  

}

void Phones() :{}{< LBRAC >
( < PHONENUMBER > )+
< RBRAC >
}

