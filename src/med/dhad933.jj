
options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(MedParser)
package med;
import java.io.*;
public class MedParser
{

}

PARSER_END(MedParser)

SKIP :
{
" "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN :   // General Tokens{ < MEDCENTER: "MEDCENTER" (< SPACES >) < NAME >>
| < HOURS: "HOURS" (< SPACES >) (< DAYS >)(< COMMA >< DAYS >)*(< TIMEPERIOD >)>
| < LBRAC: "{" >
| < RBRAC: "}" >
| < COMMA: "," >
| < #DAYS: ("Mon"|"Tue"|"Wed"|"Thu"|"Fri"|"Sat"|"Sun") >

| < DIGIT : (["0"-"9"]) >
| < INTEGER_PAIR : (< DIGIT >){2} >
| < #TIME: (< INTEGER_PAIR >)[":"](< INTEGER_PAIR >) >
| < #TIMEPERIOD: ["("](< TIME >)["-"](< TIME >)[")"] >
| < MONTHS: ("January"|"February"|"March"|"April"|"May"|"June"|"July"|"August"|"September"|"October"|"November"|"December") >

| < LETTER: ["A"-"Z","a"-"z"," "] >
| < ULETTER: ["A"-"Z"] >
| < NAME: ["“"](< LETTER >)+["”"] >
| < #SPACES : (" ")* >
}

TOKEN :  // Doctor Tokens{< DOCTOR: ("DOCTOR")(< SPACES >)(< NAME >) (< SPACES >)(< REG_IDWINT >) >
| < #REG_ID: "REG_ID" >
| < #FIVEDIGIT: (< DIGIT >){5} >
| < #REG_IDWINT: (< REG_ID >)(" ")?(< FIVEDIGIT >) >
}

TOKEN :  // Phone Tokens
{
  < PHONES : "PHONES" >
| < PHONENUMBER : (< PHONETYPES >)(< SPACES >)(< NUMBER >)((< SPACES >)(< EXT >)(< SPACES >)(< DIGIT >)+)?>
| < #PHONETYPES : ("HOME"|"WORK"|"MOBILE")(":") >
| < #EXT : "EXT" >
| < #NUMBER : ("+")?(< DIGIT >)+ >
}

TOKEN :  // Patient Tokens{< PATIENT: "PATIENT" (< SPACES >)< NAME >>
| < ID : "ID" (< SPACES >)< IDSTRING >>
| < #IDSTRING : (< ULETTER >){2}(< DIGIT >){5} >
| < DOB : "DOB" (< SPACES >) < DOBSTRING >>
| < #DOBSTRING : (< DIGIT >){1,2}(< SPACES >)(< MONTHS >)(< SPACES >)(< DIGIT >){4} >
| < ADDRESS : "ADDRESS" (< SPACES >)["\u201c"](< ADDRESSSTRING >)["\u201d"] >
| < #ADDRESSSTRING : (< LETTER > | < DIGIT > | "-" | "/" | < COMMA >)+ >
}

void MedCenter() :{
}
{
  < MEDCENTER >
  < LBRAC >
  MedCenterAttr()
  < RBRAC >
  < EOF >}

void MedCenterAttr() :
{
	boolean[] count = new boolean[2];
	count[0] = false;  // At least 1 Hour variable
	count[1] = false;  // At least 1 Doctor variable}
{	(		< HOURS >		{
			count[0] = true; // Found Hour		}
		|  < DOCTOR >
		{
			count[1] = true;  // Found Doctor		}
		|  < PATIENT > Patient()
	)+
	
	({		if(!count[0]) // If no Hours found		{ 
			throw new ParseException("HOURS is not defined");
		}
		else if(!count[1])   // If no Doctors found		{			throw new ParseException("DOCTOR is not defined");
		}	})
}

void Patient() : {}{	< LBRAC >
		PatientAttr()
	< RBRAC >
}

void PatientAttr() :{
	int[] count = new int[4];
	count[0] = 0;       // ID
	count[1] = 0;      	// DOB
	count[2] = 0;		// Phones
	count[3] = 0;		// Address}{	(    < ID >    {		count[0]++;
    }
	| < DOB >
	{
		count[1]++;
    }
	| < PHONES > Phones()
	{
		count[2]++;
    }
	| < ADDRESS >
	{
		count[3]++;
    }
	)*

	({		if(count[0] != 1)  // If not exactly 1 ID is declared		{			throw new ParseException("Exactly 1 ID must be defined per patient");
		}
		else if(count[1] > 1)   // If more than one DOB declared
		{			throw new ParseException("More than 1 DOB given");	
		}
		else if(count[2] > 1)	// If more than one PHONES list declared		{			throw new ParseException("More than 1 PHONES list given");
		}
		else if(count[3] > 1)	// If more than one ADDRESS declared		{			throw new ParseException("More than 1 ADDRESS given");
		}	})  
}

void Phones() : {}{	< LBRAC >
		( < PHONENUMBER > )+      // + prevents 0 phones being declared
	< RBRAC >
}

