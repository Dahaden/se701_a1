options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(MedParser)
package med;
import java.io.*;
public class MedParser
{

}

PARSER_END(MedParser)

SKIP :
{
" "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN :   // General Tokens{ < MEDCENTER: "MEDCENTER">
| < HOURS: "HOURS" >
| < LBRAC: "{" >
| < RBRAC: "}" >
| < LRBRAC: "(">
| < RRBRAC: ")">
| < COMMA: "," >
| < COLON: ":" >
| < HYPHEN: "-" >

| < DAYS: ("Mon"|"Tue"|"Wed"|"Thu"|"Fri"|"Sat"|"Sun") >

| < DIGIT : (["0"-"9"]) >
| < INTEGER_PAIR : (< DIGIT >){2} >
| < MONTHS: ("January"|"February"|"March"|"April"|"May"|"June"|"July"|"August"|"September"|"October"|"November"|"December") >

| < #LETTER: ["A"-"Z","a"-"z"," "] >
| < #ULETTER: ["A"-"Z"] >
| < NAME: ["\""](< LETTER >)+["\""] >
}

TOKEN :  // Doctor Tokens{< DOCTOR: "DOCTOR" >
| < REG_ID: "REG_ID" >
| < FIVEDIGIT: (< DIGIT >){5} >
}

TOKEN :  // Patient Tokens{< PATIENT: "PATIENT">
| < ID : "ID" >
| < IDSTRING : (< ULETTER >){2}(< DIGIT >){5} >
| < DOB : "DOB">
| < FOURDIGIT : (< DIGIT >){4} >
| < ADDRESS : "ADDRESS" >
| < ADDRESSSTRING : ["\""](< LETTER > | < DIGIT > | "-" | "/" | < COMMA >)+["\""] >
}

TOKEN :  // Phone Tokens
{
  < PHONES : "PHONES" >
//| < PHONENUMBER : (< INTEGER_PAIR >|< FOURDIGIT >|< FIVEDIGIT >|(< DIGIT >)+)>
| < PHONETYPES : ("HOME"|"WORK"|"MOBILE") >
| < EXT : "EXT" >
| < PLUS : "+" >
}

void MedCenter() : {}
{
  < MEDCENTER >
  < NAME >
  < LBRAC >
  MedCenterAttr()
  < RBRAC >
  < EOF >}

void MedCenterAttr() : {}
{	(Hours())+
	(Doctors())+
	(Patient())*
}

void Hours() : {}
{
 	< HOURS > 	< DAYS >(< COMMA >< DAYS >)*
	< LRBRAC >< INTEGER_PAIR >< COLON >< INTEGER_PAIR >
	< HYPHEN >< INTEGER_PAIR >< COLON >< INTEGER_PAIR >< RRBRAC >
}

void Doctors() : {}
{	< DOCTOR >
	< NAME >
	< REG_ID >
	< FIVEDIGIT >
}

void Patient() : {}{
    < PATIENT > < NAME >	< LBRAC >
		PatientAttr()
	< RBRAC >
}

void PatientAttr() :{
	int[] count = new int[4];
	count[0] = 0;       // ID
	count[1] = 0;      	// DOB
	count[2] = 0;		// Phones
	count[3] = 0;		// Address}{	(    < ID > < IDSTRING >    {		count[0]++;
    }
	| DateOfBirth()
	{
		count[1]++;
    }
	| Phones()
	{
		count[2]++;
    }
	| < ADDRESS > <ADDRESSSTRING >
	{
		count[3]++;
    }
	)*

	({		if(count[0] != 1)  // If not exactly 1 ID is declared		{			throw new ParseException("Exactly 1 ID must be defined per patient");
		}
		else if(count[1] > 1)   // If more than one DOB declared
		{			throw new ParseException("More than 1 DOB given");	
		}
		else if(count[2] > 1)	// If more than one PHONES list declared		{			throw new ParseException("More than 1 PHONES list given");
		}
		else if(count[3] > 1)	// If more than one ADDRESS declared		{			throw new ParseException("More than 1 ADDRESS given");
		}	})  
}

void DateOfBirth() : {}
{
  	< DOB >
  	( < DIGIT > | < INTEGER_PAIR >)
  	< MONTHS >
  	< FOURDIGIT >   }

void Phones() : {}{
  	< PHONES >	< LBRAC >
		( < PHONETYPES > < COLON > (< PLUS >)?
			(< INTEGER_PAIR >|< FOURDIGIT >|< FIVEDIGIT >|(< DIGIT >)+)+    // Something better??
		  	(< EXT >(< INTEGER_PAIR >|< FOURDIGIT >|< FIVEDIGIT >|(< DIGIT >)+)+)?
		  	)+      // + prevents 0 phones being declared
	< RBRAC >
}

